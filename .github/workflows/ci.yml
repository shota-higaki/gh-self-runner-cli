name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load version configuration
        run: |
          set -a
          source .github/versions.env
          set +a
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
          echo "BUN_VERSION=$BUN_VERSION" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run Biome lint
        run: bun run lint

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load version configuration
        run: |
          set -a
          source .github/versions.env
          set +a
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
          echo "BUN_VERSION=$BUN_VERSION" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run TypeScript type check
        run: bun run typecheck

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load version configuration (Unix)
        if: runner.os != 'Windows'
        run: |
          set -a
          source .github/versions.env
          set +a
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
          echo "BUN_VERSION=$BUN_VERSION" >> $GITHUB_ENV

      - name: Load version configuration (Windows)
        if: runner.os == 'Windows'
        run: |
          Get-Content .github/versions.env | ForEach-Object {
            if ($_ -match '^([A-Z_]+)=(.+)$') {
              echo "$($matches[1])=$($matches[2])" >> $env:GITHUB_ENV
            }
          }
        shell: pwsh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies (Unix)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache dependencies (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ~\.bun\install\cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Run tests with coverage
        run: bun run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load version configuration
        run: |
          set -a
          source .github/versions.env
          set +a
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
          echo "BUN_VERSION=$BUN_VERSION" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Build project
        run: bun run build

      - name: Verify CLI executable
        run: |
          chmod +x dist/cli/index.js
          node dist/cli/index.js --version

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'push' || github.actor == 'dependabot[bot]'
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'